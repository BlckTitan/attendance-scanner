 <div className='w-full h-[50px] bg-(--background-gray) rounded-md relative flex items-center justify-between px-5 mt-4'>
                    <span className='flex items-center text-xs text-(--text-gray)'>
                        <Clock className='w-4 h-4 mr-1'/>
                        Choose Time
                    </span>

                    <label 
                        htmlFor="time" 
                        onClick={toggleDropdown}
                        className='w-8 h-8 flex justify-center items-center text-(--text-gray) bg-(--button-gray) rounded-sm hover:bg-gray-200'
                    >
                        {(isOpen === false) ? <ChevronDown /> : <ChevronUp />}
                    </label>
                    <ul 
                        id='time'
                        className={'w-full h-fit absolute right-0 top-11 rounded-b-xl p-4 bg-(--background-gray) text-xs text-(--text-gray) ' + (isOpen ? ' block' : ' hidden')}
                    >
                        <li 
                            className='py-2 px-2 text-(--primary) hover:bg-(--navigation-gray) flex justify-between items-center rounded-sm'                        
                            onClick={() => setIsOpen(false)}
                        >
                            All Day (9am - 5pm)
                            {/* time input selector */}
                            <input 
                                type='radio'
                                {...register('time', {required: true})}
                                className='mr-0.5'
                            />
                        </li>
                        <li className='py-2 px-2 text-(--primary) hover:bg-(--navigation-gray) flex justify-between items-center rounded-sm'>
                            Custom
                            {/* time input selector */}
                            <input 
                                type='radio'
                                {...register('customTime', {required: true})}
                                className='mr-0.5'
                                onClick={() => {
                                    setIsCustom(true);
                                }}
                            />
                           
                        </li>

                        <div className={(isCustom) ? 'flex justify-end items-center my-2' : 'hidden'}>
                                <label htmlFor='reserved' className='flex items-center text-xs font-medium'>
                                
                                    {/* reserved input selector */}
                                    <input 
                                        type='radio'
                                        {...register('reserved', {required: true})}
                                        className='mr-0.5'
                                    />
                                    Reserved
                                </label>

                                <label htmlFor='reserved' className='flex items-center text-xs font-medium mx-1'>
                                
                                    {/* selected input selector */}
                                    <input 
                                        type='radio'
                                        {...register('reserved', {required: true})}
                                        className='mr-0.5'
                                    />
                                    Selected
                                </label>

                                <label htmlFor='reserved' className='flex items-center text-xs font-medium'>
                                    
                                    {/* available input selector */}
                                    <input 
                                        type='radio'
                                        {...register('reserved', {required: true})}
                                        className='mr-0.5'
                                    />
                                    Available
                                </label>
                        </div>
                        {/* custom time options */}
                         <div className={(isCustom ? "grid grid-cols-3 gap-1.5" : 'hidden')}>
                                {
                                    timeData.map((time, index) => (
                                        <button
                                            key={index} 
                                            type='button'
                                            className={'border hover:border-(--primary) w-24 h-8 text-xs font-medium rounded-sm my-1' + ((customTime === time.value) ? ' bg-(--primary) text-white' : 'bg-(--button-gray) ')}   
                                            onClick={() => { 
                                                setCustomTime(time.value);                        
                                                setIsOpen(false)
                                            }} 
                                        >
                                            {time.label}
                                        </button>
                                    ))
                                }
                            </div>
                    </ul>
                </div>

                ////

<DropdownMenuSub open={isCustom} onOpenChange={setIsCustom}>
                                    <DropdownMenuSubTrigger 
                                        asChild
                                        className="w-full h-[31px] px-5 group relative flex select-none justify-between items-center hover:bg-(--button-gray) rounded-sm text-xs leading-none text-violet11 outline-none data-[disabled]:pointer-events-none data-[highlighted]:bg-violet9 data-[highlighted]:data-[state=open]:bg-violet9 data-[state=open]:bg-violet4 data-[disabled]:text-mauve8 data-[highlighted]:data-[state=open]:text-violet1 data-[highlighted]:text-violet1 data-[state=open]:text-violet11"
                                    >
                                        <label>
                                            Custom
                                            {/* time input selector */}
                                            <input 
                                                type='radio'
                                                {...register('time', {required: true})}
                                                onPointerDown={(e) => {
                                                    e.preventDefault();
                                                    setIsCustom(!isCustom)
                                                }}
                                            />
                                        </label>
                                    </DropdownMenuSubTrigger>

                                    <DropdownMenuPortal>
                                        <DropdownMenuSubContent
                                            className={"w-[335px] rounded-b-md bg-(--background-gray) p-5 will-change-[opacity,transform] data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade data-[side=right]:animate-slideLeftAndFade data-[side=top]:animate-slideDownAndFade"+ (isCustom ? ' block' : ' hidden')}
                                            sideOffset={-320}
                                            alignOffset={35}
                                        >
                                            <DropdownMenuItem 
                                                className="w-full group relative h-fit select-none grid grid-cols-3 gap-2 item-center text-xs leading-none text-violet11 outline-none data-[disabled]:pointer-events-none data-[highlighted]:bg-violet9 data-[disabled]:text-mauve8 data-[highlighted]:text-violet1"
                                            >
                                                {
                                                    timeData.map((time, index) => (
                                                        <button
                                                            key={index} 
                                                            type='button'
                                                            className={'border hover:border-(--primary) w-24 h-8 text-xs font-medium rounded-sm' + ((customTime === time.value) ? ' bg-(--primary) text-white' : 'bg-(--button-gray) rounded-sm')}   
                                                            onClick={() => { 
                                                                setCustomTime(time.value); 
                                                            }} 
                                                        >
                                                            {time.label}
                                                        </button>
                                                    ))
                                                }
                                            </DropdownMenuItem>
                                        </DropdownMenuSubContent>
                                    </DropdownMenuPortal>
                                </DropdownMenuSub>


<input 
                                        type='radio'
                                        {...register('time', {required: true})}
                                        onClick={() => setIsCustom(false)}
                                    />

                                    <label 
                                        onClick={() => setIsCustom(true)}
                                        className="w-full h-[31px] px-5 group relative select-none flex justify-between items-center hover:bg-(--button-gray) rounded-sm text-xs mb-4"
                                    >
                                        Custom
                                        {/* time input selector */}
                                        <input 
                                            type='radio'
                                            {...register('time', {required: true})}
                                            onPointerDown={(e) => {
                                                e.preventDefault();
                                                setIsCustom(!isCustom)
                                            }}
                                        />
                                    </label>